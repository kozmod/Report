http://code-flow-hjbello.blogspot.ru/2017/03/taking-decissions-inside-spring-batch.html



package springBatch;


import org.springframework.batch.core.*;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.job.builder.FlowBuilder;
import org.springframework.batch.core.job.flow.Flow;
import org.springframework.batch.core.job.flow.FlowExecutionStatus;
import org.springframework.batch.core.job.flow.JobExecutionDecider;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;
import org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException;
import org.springframework.batch.core.repository.JobRestartException;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.skip.ExceptionClassifierSkipPolicy;
import org.springframework.batch.core.step.skip.NeverSkipItemSkipPolicy;
import org.springframework.batch.core.step.skip.SkipLimitExceededException;
import org.springframework.batch.core.step.skip.SkipPolicy;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.FlatFileParseException;
import org.springframework.batch.item.file.LineMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.mapping.FieldSetMapper;
import org.springframework.batch.item.file.transform.DefaultFieldSetFactory;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.batch.item.file.transform.FieldSet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.classify.SubclassClassifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.validation.BindException;
import springBatch.pojos.ReceiptTransaction;

import java.math.BigInteger;
import java.text.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;


@Configuration
@EnableBatchProcessing
@EnableAsync
@EnableScheduling
//@PropertySource("classpath:my.properties")
public class BatchConfiguration {
//    @Value("${application.cycle_period.fixed-rate}")
//    private String PERIOD;

    public static final DateFormat ORDER_DATE_INPUT_FORMAT = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
    public static final DecimalFormat AMOUNT_INPUT_FORMAT = new DecimalFormat(){{
        setDecimalFormatSymbols(new DecimalFormatSymbols(){{
            setDecimalSeparator('.');
        }});
    }};
//    public static final String AMOUNT_REGEX = "[0-9]+.{0,1}[0-9]{0,2}";

    private BigInteger ammountSum;
    private BigInteger amountPaySum = new BigInteger("0");
    private int headerQ = 0;
    private int quantity = 0;
    private boolean containHeader = false;

    @Autowired
    protected StepBuilderFactory stepBuilderFactory;

    private final ApplicationContext appContext;
    private final JobLauncher jobLauncher;

    @Autowired
    public BatchConfiguration( ApplicationContext appContext
                              ,JobLauncher jobLauncher
    ) {
        this.jobLauncher = jobLauncher;
        this.appContext = appContext;
    }

    /***************************************************************************
     *                                                                         *
     *Schedule                                                                 *
     *                                                                         *
     **************************************************************************/
    /**
     * if you want ot repeat the job -> change "JobParameters".
     */
    @Scheduled(cron = "*/10 * * * * *")
    public void launch() {
        final JobParameters jobParameters =
                new JobParametersBuilder()
                        .addString("input.file.name",
                                "20170918OUEK.CSV"
                        )
                        .addLong("time",
                                System.currentTimeMillis()
                        )
                        .toJobParameters();
        try {
            JobExecution jex = jobLauncher.run((Job) appContext.getBean("parsingJob")
                    , jobParameters);
            if(jex.getStatus().equals(BatchStatus.COMPLETED)){
                System.out.println("\033[32m AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \033[0m");
            }
        } catch (JobExecutionAlreadyRunningException
                | JobRestartException
                | JobInstanceAlreadyCompleteException
                | JobParametersInvalidException e
                ) {
            e.printStackTrace();
        }
    }

    /***************************************************************************
     *                                                                         *
     * READERS                                                                 *
     *                                                                         *
     **************************************************************************/
//    @Bean
//    public ItemReader<String> reader() {
//        FlatFileItemReader<String> reader = new FlatFileItemReader<String>();
//        reader.setResource(new ClassPathResource("201709181OUEK.CSV"));
//        reader.setLineMapper(new LineMapper<String>() {
//            @Override
//            public String mapLine(String line, int lineNumber) throws Exception {
//                System.err.println(lineNumber+ " line number");
//                return line;
//            }
//        });
//        reader.setLinesToSkip(1);
//        return reader;
//    }
    @Bean("checkSumTasklet")
    public Tasklet checkSumTasklet(
            @Value("20170918OUEK.CSV") String reportFileName
    ){
        return new Tasklet() {
            @Override
            public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
                RepeatStatus repeatStatus = RepeatStatus.FINISHED;
                FlatFileItemReader<String> reader = new FlatFileItemReader<String>();
                reader.setResource(new ClassPathResource(reportFileName));
                reader.setLineMapper(new LineMapper<String>() {
                    @Override
                    public String mapLine(String line, int lineNumber) throws Exception {
                        final String[] values = line.split(";");
                        if(values.length > 0 && values[0].equals("sum")){
                            String s = values[7].replace(".","");
                            ammountSum = new BigInteger(s);
                            headerQ = Integer.valueOf(values[5]);
                            containHeader = true;
                        }else{
                            containHeader = false;
                        }
                        return line;
                    }
                });
                reader.open(new ExecutionContext());
                reader.read();
                reader.close();
                return repeatStatus;
            }
        };
    }
    @Bean("payReader")
    public ItemReader<ReceiptTransaction> reader(
            @Value("20170918OUEK.CSV") String reportFileName
    ) {
        FlatFileItemReader<ReceiptTransaction> reader = new FlatFileItemReader<ReceiptTransaction>(){
            @Override
            protected ReceiptTransaction doRead() throws Exception {
                ReceiptTransaction s = super.doRead();
                System.out.println(s);
//                if(s == null && headerQ != quantity) {
                    System.err.println(" s == null && headerQ != quantity " + (s == null) + "  " + (headerQ != quantity) + " "+headerQ+ " "+quantity  );
//                    throw new  Exception();
//                }

                return s ;
            }
        };
        reader.setResource(new ClassPathResource(reportFileName));
        reader.setLineMapper(new DefaultLineMapper<ReceiptTransaction>() {{
            setLineTokenizer(new DelimitedLineTokenizer() {{
                setDelimiter(";");
                setQuoteCharacter('"');
//                setNames(new String[] { "service","orderNumber","transactionId"});
//                setNames(new String[] { "service","order_date","transactionId", "amount"});
                setIncludedFields(new int[]{0,1,2,3});
                setFieldSetFactory(new DefaultFieldSetFactory(){{
                    setDateFormat(ORDER_DATE_INPUT_FORMAT);
                    setNumberFormat(AMOUNT_INPUT_FORMAT);
                }});
            }});
            setFieldSetMapper(new FieldSetMapper<ReceiptTransaction>(){
                @Override
                public ReceiptTransaction mapFieldSet(FieldSet fieldSet) throws BindException {
                    ReceiptTransaction rt  = new ReceiptTransaction();
                    try {
                        rt.setService(fieldSet.readString(0));
                        rt.setOrderDate(ORDER_DATE_INPUT_FORMAT.parse(fieldSet.readString(1)));
                        rt.setTransactionId(fieldSet.readString(2));
                        Double amountValue = Double.parseDouble(fieldSet.readString(3))*100;
                        rt.setAmount(amountValue.longValue());

//                   rt.setService(fieldSet.readString(0));
                    } catch (ParseException e) {
                        e.printStackTrace();
                    }
                    return rt;
                }
            });
        }});
        reader.setLinesToSkip(1);
        return reader;
    }

    /***************************************************************************
     *                                                                         *
     * Processors                                                              *
     *                                                                         *
     **************************************************************************/
    @Bean("payProcessor")
    public ItemProcessor<ReceiptTransaction, ReceiptTransaction> processor() {
        return new ItemProcessor<ReceiptTransaction, ReceiptTransaction>(){
            @Override
            public ReceiptTransaction process(ReceiptTransaction item) throws Exception {
                amountPaySum = amountPaySum.add(BigInteger.valueOf(item.getAmount()));
                System.err.println(
                        "\033[34;43m" +
                                item.getService() + " " +
                                item.getOrderDate() + " TA->" +
                                item.getTransactionId() + " A->" +
                                item.getAmount() + " "
                                +  "\033[0m"
                );
                quantity++;
                return item;
            }
        };
    }

    /***************************************************************************
     *                                                                         *
     * WRITERS                                                                 *
     *                                                                         *
     **************************************************************************/
//    @Bean
//    public ItemWriter<String> writer(
//            @Value("#{systemProperties['user.dir'].concat('\\fileOut')}")String path)
//            throws IOException {
//        //writer
//    	FlatFileItemWriter<String> writer = new FlatFileItemWriter<String>(){
//            @Override
//            public void write(List<? extends String> items) throws Exception {
////                System.out.println("--------------> "+ path + " header : " + headerString);
//                super.write(items);
//            }
//        };
////    	writer.setResource(new ClassPathResource("student-marksheet.csv"));
//    	writer.setResource(
//    	        new FileSystemResource(
//    	                path.concat("\\").concat("student-marksheet.csv")
//                )
//        );
//        writer.setShouldDeleteIfEmpty(true);
//    	writer.setLineAggregator(new LineAggregator<String>() {
//            @Override
//            public String aggregate(String item) {
//                return item;
//            }
//
//        });
////        writer.setAppendAllowed(true);
//        return writer;
//    }
    /***************************************************************************
     *                                                                         *
     * Jobs                                                                    *
     *                                                                         *
     **************************************************************************/
    @Bean("parsingJob")
    public Job parsingJob(JobBuilderFactory jobs
//                               @Qualifier("sumPaymentStep") Step step1,
//                               @Qualifier("checkPaymentSumStep") Step step2
    ) {
//        Flow flow = new FlowBuilder<Flow>("flow1")
//                .start( sumPaymentStep())
//                .next(new JobExecutionDecider() {
//                    @Override
//                    public FlowExecutionStatus decide(JobExecution jobExecution, StepExecution stepExecution) {
//                        FlowExecutionStatus flowExecutionStatus = FlowExecutionStatus.COMPLETED;
//                        if(!stepExecution.getStatus().equals(BatchStatus.COMPLETED) || !containHeader)
//                            flowExecutionStatus = FlowExecutionStatus.FAILED;
//                        return flowExecutionStatus;
//                    }
//                })
//                .on("COMPLETED")
//                .to((Step) appContext.getBean("checkPaymentSumStep"))
//                .on("COMPLETED").to(soutStep())
//                .from(getHUI())
//                .on("FAILED" ).to(soutStep2())
//                .end();//

        Flow flow2 = new FlowBuilder<Flow>("flow2")
                .start(soutStep3())
                .end();


 Flow flow = new FlowBuilder<Flow>("flow1")
                .start(soutStep())
                .next(getHUI())
         .on("COMPLETED")
         .to(soutStep2())
//         .from(getHUI())
//         .on("FAILED")
//         .to(soutStep3())
         .next(soutStep3())
         .end();
        return jobs.get("parsingJob")
                .start(flow)
                .next(flow2)
                .end()
                .build();
    }

    @Bean
    public JobExecutionDecider getHUI(){
        return  new JobExecutionDecider() {

            @Override
            public FlowExecutionStatus decide(JobExecution jobExecution, StepExecution stepExecution) {
                Random generator = new Random();
                int randomInt = generator.nextInt();

                System.err.println("Executing Decision with randomInt = " + randomInt);

                if(randomInt % 2 == 0){
                    System.err.println("------------------------------------------");
                    System.err.println("Completed -> go to step 2");
                    System.err.println("------------------------------------------");
                    return FlowExecutionStatus.COMPLETED;
                }
                System.err.println("------------------------------------------");
                System.err.println("Failed -> go to step 3");
                System.err.println("------------------------------------------");
                return FlowExecutionStatus.FAILED;
            }
        };
    }
    /***************************************************************************
     *                                                                         *
     * Steps                                                                   *
     *                                                                         *
     **************************************************************************/
    @Bean
    public Step sumPaymentStep() {
        return stepBuilderFactory.get("sumPaymentStep")
                .tasklet((Tasklet) appContext.getBean("checkSumTasklet"))
//                .tasklet(new TaskletStep())
                .build();
    }
    @Bean
    public Step checkPaymentSumStep() {
        ItemReader<ReceiptTransaction> reader
                = (ItemReader)appContext.getBean("payReader");
//        ItemProcessor<ReceiptTransaction, ReceiptTransaction>  processor
//                =(ItemProcessor) appContext.getBean("payProcessor");

        return stepBuilderFactory.get("checkPaymentSumStep")
                .<ReceiptTransaction, ReceiptTransaction> chunk(500)
                .reader(reader)
                .processor(this.processor())
                .writer(new ItemWriter<ReceiptTransaction>() {
                    @Override
                    public void write(List<? extends ReceiptTransaction> items) throws Exception {
                        if(quantity <= headerQ)
                        System.err.println(System.currentTimeMillis() +"------------------------------ write ---------------------------------- " + items.size());
                        else
                            System.out.println("------------------------------ no ---------------------------------- ");
                    }
                })
                .build();
    }
    @Bean
    public Step soutStep() {
        return stepBuilderFactory
                .get("soutStep")
                .tasklet(new Tasklet() {
                    @Override
                    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
                        System.err.println("\033[33;1m -------------------------------------------------------------->  soutStep\033[0m");
                        RepeatStatus repeatStatus = RepeatStatus.FINISHED;
                        return repeatStatus;
                    }
                })
                .build();
    }
    @Bean
    public Step soutStep2() {
        return stepBuilderFactory
                .get("soutStep2")
                .tasklet(new Tasklet() {
                    @Override
                    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
                        System.err.println("\033[35;1m  -------------------------------------------------------------->  soutStep2\033[0m");
                        RepeatStatus repeatStatus = RepeatStatus.FINISHED;
                        return repeatStatus;
                    }
                })
                .build();
    }
    @Bean
    public Step soutStep3() {
        return stepBuilderFactory
                .get("soutStep3")
                .tasklet(new Tasklet() {
                    @Override
                    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
                        System.out.println("\033[32;1m  -------------------------------------------------------------->  soutStep3 \033[0m");
                        RepeatStatus repeatStatus = RepeatStatus.FINISHED;
                        return repeatStatus;
                    }
                })
                .build();
    }
    /***************************************************************************
     *                                                                         *
     * Tasklet                                                                 *
     *                                                                         *
     **************************************************************************/

//    public class TaskletStep implements Tasklet {
//        @Override
//        public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
//            RepeatStatus repeatStatus = RepeatStatus.FINISHED;
//            FlatFileItemReader<String> reader = new FlatFileItemReader<String>();
//            reader.setResource(new ClassPathResource("201709181OUEK.CSV"));
//            reader.setLineMapper(new LineMapper<String>() {
//                @Override
//                public String mapLine(String line, int lineNumber) throws Exception {
//                    final String[] values = line.split(";");
//                    if(values.length > 0 & values[0].equals("sum")){
//                        String s = values[7].replace(".","");
//                        ammountSum = new BigInteger(s);
//                    }
//                    return line;
//                }
//            });
//            reader.open(new ExecutionContext());
//            reader.read();
//            reader.close();
//            return repeatStatus;
//        }
//    }

}
